# Semantest Enterprise Production Deployment
# Docker Compose configuration for production-ready deployment
version: '3.8'

networks:
  semantest-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  semantest-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

services:
  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.24-alpine
    container_name: semantest-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - semantest-frontend
      - semantest-backend
    depends_on:
      - coordination-service
      - mcp-bridge-service
      - monitoring-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services
  coordination-service:
    image: semantest/coordination-service:${VERSION:-latest}
    container_name: semantest-coordination
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://semantest:${DB_PASSWORD}@postgres:5432/semantest
      - KAFKA_BROKERS=kafka:9092
      - REDIS_URL=redis://redis:6379
      - MCP_ENDPOINT=${MCP_ENDPOINT}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    networks:
      - semantest-backend
    depends_on:
      - postgres
      - kafka
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  mcp-bridge-service:
    image: semantest/mcp-bridge:${VERSION:-latest}
    container_name: semantest-mcp-bridge
    environment:
      - NODE_ENV=production
      - MCP_ENDPOINT=${MCP_ENDPOINT}
      - MCP_API_KEY=${MCP_API_KEY}
      - AI_MODEL_REGISTRY_URL=http://model-registry:8080
      - KAFKA_BROKERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    networks:
      - semantest-backend
    depends_on:
      - kafka
      - redis
      - model-registry
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  security-service:
    image: semantest/security-service:${VERSION:-latest}
    container_name: semantest-security
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://semantest:${DB_PASSWORD}@postgres:5432/semantest
      - AUTH_PROVIDER_URL=${AUTH_PROVIDER_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - semantest-backend
    depends_on:
      - postgres
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitoring-service:
    image: semantest/monitoring-service:${VERSION:-latest}
    container_name: semantest-monitoring
    environment:
      - NODE_ENV=production
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KAFKA_BROKERS=kafka:9092
    networks:
      - semantest-backend
    depends_on:
      - prometheus
      - grafana
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

  model-registry:
    image: semantest/model-registry:${VERSION:-latest}
    container_name: semantest-model-registry
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://semantest:${DB_PASSWORD}@postgres:5432/semantest
      - REDIS_URL=redis://redis:6379
    networks:
      - semantest-backend
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: semantest-postgres
    environment:
      - POSTGRES_DB=semantest
      - POSTGRES_USER=semantest
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - semantest-backend
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U semantest -d semantest"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: semantest-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - semantest-backend
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: semantest-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - semantest-backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: semantest-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - semantest-backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: semantest-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - semantest-backend
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    container_name: semantest-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - semantest-backend
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: semantest-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - semantest-backend
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: semantest-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana.semantest.local
    networks:
      - semantest-backend
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

  # Log Management
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: semantest-fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc:ro
      - /var/log:/var/log:ro
    networks:
      - semantest-backend
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

  # Security and Backup
  backup-service:
    image: semantest/backup-service:${VERSION:-latest}
    container_name: semantest-backup
    environment:
      - DATABASE_URL=postgresql://semantest:${DB_PASSWORD}@postgres:5432/semantest
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
    networks:
      - semantest-backend
    depends_on:
      - postgres
    restart: unless-stopped

  # Health Check and Monitoring
  healthcheck-service:
    image: semantest/healthcheck-service:${VERSION:-latest}
    container_name: semantest-healthcheck
    environment:
      - CHECK_INTERVAL=30s
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - SERVICES=coordination-service,mcp-bridge-service,security-service,postgres,kafka,redis
    networks:
      - semantest-backend
    restart: unless-stopped